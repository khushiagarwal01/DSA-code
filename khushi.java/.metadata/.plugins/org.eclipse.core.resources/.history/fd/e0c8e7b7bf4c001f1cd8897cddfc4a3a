package Tree;

import java.util.Scanner;

public class BinaryTree {

    Scanner sc = new Scanner(System.in);

    public class Node {
        int data;
        Node left;
        Node right;
    }

    private Node root;

    public static void main(String[] args) {
        BinaryTree bt = new BinaryTree();
        bt.root = bt.createroot();
        bt.display(bt.root, "", true);  // Call with initial indent and last flag
        System.out.println("Max value in the tree: " + bt.max(bt.root));
    }

    public BinaryTree() {
        // Constructor logic if needed
        this.root = createroot();
    }

    private Node createroot() {
        int item = sc.nextInt();
        System.out.println("Creating node with data: " + item);  // Debug statement
        Node nn = new Node();
        nn.data = item;
        boolean hlc = sc.nextBoolean();
        if (hlc) {
            System.out.println("Creating left child for node: " + item);  // Debug statement
            nn.left = createroot();
        }
        boolean hrc = sc.nextBoolean();
        if (hrc) {
            System.out.println("Creating right child for node: " + item);  // Debug statement
            nn.right = createroot();
        }
        return nn;
    }

    public void display(Node nn, String indent, boolean last) {
        if (nn == null) {
            System.out.println(indent + (last ? "└── " : "├── ") + "null");
            return;
        }
        System.out.println(indent + (last ? "└── " : "├── ") + nn.data);
        indent += (last ? "    " : "│   ");
        display(nn.left, indent, false);
        display(nn.right, indent, true);
    }

    public int max(Node node) {
        if (node == null) {
            return Integer.MIN_VALUE;
        }
        int l = max(node.left);
        int r = max(node.right);
        return Math.max(node.data, Math.max(l, r));
    }
}
